// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all pets
	// (GET /pets)
	FindPets(c *gin.Context, params FindPetsParams)
	// Creates a new pet
	// (POST /pets)
	AddPet(c *gin.Context)
	// Deletes a pet by ID
	// (DELETE /pets/{id})
	DeletePet(c *gin.Context, id int64)
	// Returns a pet by ID
	// (GET /pets/{id})
	FindPetByID(c *gin.Context, id int64)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// FindPets operation middleware
func (siw *ServerInterfaceWrapper) FindPets(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", c.Request.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tags: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.FindPets(c, params)
}

// AddPet operation middleware
func (siw *ServerInterfaceWrapper) AddPet(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddPet(c)
}

// DeletePet operation middleware
func (siw *ServerInterfaceWrapper) DeletePet(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeletePet(c, id)
}

// FindPetByID operation middleware
func (siw *ServerInterfaceWrapper) FindPetByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.FindPetByID(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/pets", wrapper.FindPets)
	router.POST(options.BaseURL+"/pets", wrapper.AddPet)
	router.DELETE(options.BaseURL+"/pets/:id", wrapper.DeletePet)
	router.GET(options.BaseURL+"/pets/:id", wrapper.FindPetByID)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/h4AAP//kAvJg1oSAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
